pipeline {
  agent any

  environment {
    VENV_DIR = 'venv'
    SONARQUBE_ENV = 'MySonarQube' // même nom que dans Jenkins > Configure System
  }

  stages {
    stage('Clone') {
      steps {
        git url: 'https://github.com/mohamed-ayedi/log-analyzer-ai.git',
            branch: 'main',
            credentialsId: 'github_token1'
      }
    }

    stage('Setup and Install Requirements') {
      steps {
        sh '''
          python3 -m venv $VENV_DIR
          . $VENV_DIR/bin/activate

          pip install --upgrade pip setuptools wheel

          if [ -f requirements.txt ]; then
            pip install --prefer-binary -r requirements.txt
          fi

          pip install chromadb sentence-transformers python-multipart redis chardet requests fastapi uvicorn
        '''
      }
    }

   stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('MySonarQube') {
          sh '''
            export PATH=$PATH:/opt/sonar-scanner/bin
            . venv/bin/activate
            sonar-scanner \
              -Dsonar.projectKey=log-analyzer-ai \
              -Dsonar.sources=. \
              -Dsonar.python.version=3.10 \
              -Dsonar.host.url=http://sonarqube:9000 \
              -Dsonar.login=$SONAR_AUTH_TOKEN
          '''
        }
      }
    }



    stage('Test') {
      steps {
        sh '''
          . $VENV_DIR/bin/activate
          pytest || echo "Les tests ont échoué mais on continue"
        '''
      }
    }

    stage('Deploy') {
      steps {
        echo 'Lancement du modèle LLaMA 3 avec Ollama...'
        sh '''
          nohup ollama run llama3 > ollama.log 2>&1 &
          sleep 5
        '''
        echo 'Tu peux maintenant accéder à ton modèle sur http://localhost:11434'
      }
    }
  }
}
